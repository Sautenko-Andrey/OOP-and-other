import matplotlib
# Мы будем использовать инструкцию import, которая создает для модуля matplotlib.pyplot
# псевдоним:
import matplotlib.pyplot as plt
# Например, функцию plot можно вызвать вот так :
#plt.plot(argument)



#                                  Построение линейного графика

# (0, 0)
# (l, 3)
# (2, 1)
# (3 , 5)
# (4, 2)
def grafic():

    x_coords=[0,1,2,3,4]
    y_coords=[0,3,1,5,2]
# Затем вызываем функцию plot для построения графика, передавая списки в качестве аргументов.
    plt.plot(x_coords,y_coords)
# Функция plot создает линейный график в оперативной памяти, но его на экран не выводит.
# Для того чтобы показать график, нужно вызвать функцию show:
    plt.show()
#grafic()

def graphik_1():
    x_coord=[1,2,3,4,5]
    y_coord=[2,6,3,7,1]
    plt.plot(x_coord,y_coord)
    plt.show()
#graphik_1()

#                        ДОБАВЛЕНИЕ ЗАГОЛОВКА, МЕТОК ОСЕЙ И СЕТКИ.

# При помощи функции title можно добавлять в график заголовок.
# Кроме того, при помощи функций ylabel и
# xlabel можно также добавить описательные метки на оси х и у.
# В график можно добавить
# сетку, вызвав для этого функцию grid и передав True в качестве аргумента.

def some_grph():
    list_x=[1,3,5,7]
    list_y=[2,3,3,2]

    plt.plot(list_x,list_y)

    plt.title("my graphic")

    plt.xlabel("for sales")
    plt.ylabel('for days')

    plt.grid(True)

    plt.show()
#some_grph()


#                         ИНДИВИДУАЛИЗАЦИЯ НАСТРОЕК ОСЕЙ Х И У

# Нижние и верхние границы осей х и у можно изменить, вызвав функции ylirn и xlirn. Вот
# пример вызова функции xlim с использованием именованных аргументов для установки
# нижней и верхней границ оси х:
# plt.xlim(xmin=l, xmax=lOO)
# plt.ylim(ymin=lO, ymax=50)

def new_graphic():
    for_x=[1,5,7,9]
    for_y=[2,2.5,3,3.5]
    plt.plot(for_x,for_y)

    plt.title("sales graphic")

    plt.xlabel('sales')
    plt.ylabel('day')

    plt.xlim(0,10)
    plt.ylim(0,10)

    plt.grid(True)

    plt.show()
#new_graphic()

# Каждую подпись метки деления можно индивидуально настроить при помощи функций
# yticks и xticks. Эти функции в качестве аргументов принимают два списка. Первый аргумент
# - это список позиций меток, а второй аргумент - список подписей для вывода в указанных
# позициях.

def new_gr_3():
    coord_x=[5,4,3,2,7]
    coord_y=[4,2,6,5,8]
    plt.plot(coord_x,coord_y)

    plt.title('strange graphic')

    plt.xlabel('month')
    plt.ylabel('sales')

    plt.xlim(0,10)
    plt.ylim(0,10)

    plt.xticks([0,2,4,6,8,10],['January','February','March','April','May','June'])
    plt.yticks([1,5,10],['bad','not bad','good'])

    plt.grid(True)

    plt.show()
#new_gr_3()


#                               ВЫВОД МАРКЕРОВ В ТОЧКАХ ДАННЫХ!!!

# В каждой точке данных на линейной диаграмме можно вывести круглую метку в качестве
# маркера, применяя функцию plot вместе с именованным аргументом mar ker=' о'.
def new_gr_65():
    x_coord=[1,2,3,4,5]
    y_coord=[0,4,2,4,0]
    plt.plot(x_coord,y_coord,marker='o')
    plt.title('with dots')
    plt.grid(True)
    plt.show()
#new_gr_65()


#                             ПОСТРОЕНИЕ СТОЛБЧАТОЙ ДИАГРАММЫ
# Функция bar в модуле matplotlib.pyplot применяется для создания столбчатой диаграммы.
# Столбчатая диаграмма имеет горизонтальную ось х, вертикальную ось у и серию прямоугольных
# столбиков, которые, как правило, исходят из оси х. Каждый прямоугольный столбик
# представляет значение, а высота столбика пропорциональна этому значению.
# Для того чтобы создать столбчатую диаграмму, сначала создаются два списка: один содержит
# координаты Х левого края каждого прямоугольного столбика, а другой - высоту каждого
# столбика вдоль оси у.

def stolbiki():
    lef_x=[2,6,8,13]
    heigh_stlb=[9,8,7,3]

    plt.title('столбики:)')

    plt.bar(lef_x,heigh_stlb)
    plt.show()
#stolbiki()

#                         ИНДИВИДУАЛЬНАЯ НАСТРОЙКА ШИРИНЫ СТОЛБИКА

# По умолчанию ширина каждого столбика на столбчатой диаграмме равняется 0.8 вдоль
# оси х. Ширину столбика можно изменить, передав в функцию bar третий аргумент.
def stolbiki_2():
    left_x=[1,5,9]
    heigh_stlb=[7,5,7]

    plt.bar(left_x,heigh_stlb,2)

    plt.xlim(0,15)
    plt.ylim(0,15)

    plt.title("коррекция ширины столбиков")

    plt.grid(True)

    plt.title('столбики:)')

    plt.bar(left_x,heigh_stlb)
    plt.show()
#stolbiki_2()

#                             ИЗМЕНЕНИЕ ЦВЕТА СТОЛБИКА
# Функция bar имеет параметр color, который можно использовать для изменения цвета
# столбиков на столбчатой диаграмме. Аргумент, который передается в этот параметр, является
# кортежем, содержащим серию цветовых кодов.
def stolb_3():
    left_x=[1,5,9]
    height_stb=[4,8,3]
    plt.bar(left_x,height_stb,color=('m','r','k'))

    plt.xlim(0,12)
    plt.ylim(0,12)

    plt.xlabel('names')
    plt.ylabel("results")

    plt.xticks([1,5,9],['Alex','Andrey','Danil'])
    plt.yticks([1,5,10],['minimum','middle','good'])

    plt.title('KPI')

    plt.grid(True)

    plt.show()
#stolb_3()

#                                 ПОСТРОЕНИЕ КРУГОВОЙ ДИАГРАММЫ

# Круговая диаграмма- это график, который показывает круг, поделенный на доли. Круг
# представляет целое, а секторы - процентное содержание целого. Для создания круговой
# диаграммы используется функция pie из модуля rna tplotlib. pyplot.

# Когда вызывается функция pie, ей в качестве аргумента передается список значений. Функция
# pie вычисляет сумму значений в списке и затем использует эту сумму в качестве значения
# целого. Затем каждый элемент в списке станет сектором (долей) в круговой диаграмме.
# Размер сектора представляет значение этого элемента как процентное содержание целого.

def krug():
    some_list=[10,20,30,40,50]
    plt.pie(some_list)

    plt.show()
#krug()

#                        ВЫВОД МЕТОК ДОЛЕЙ И ЗАГОЛОВКА ДИАГРАММЫ

# Функция pie имеет параметр labels, который можно использовать для отображения меток
# долей на круговой диаграмме. Аргумент, который передается в этот параметр, является списком,
# содержащим нужные метки в качестве строковых литеров.

def krug_1():
    some_list=[10,20,30,40,50]
    names=['Alex','Anna','Segey','Danil','Andrey']
    plt.pie(some_list,labels=names)
    plt.show()
krug_1()