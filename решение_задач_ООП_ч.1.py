# Решение задач по ООП из первого раздела!

# Задача №1!
# Напишите определение класса с именем вооk. Класс Book должен иметь атрибуты данных
# для заголовка книги, имени автора и имени издателя. Этот класс должен также иметь
# следующие методы:
# • метод _ ini t _ () для класса должен принимать аргумент для каждого атрибута данных;
# • методы-получатели и методы-модификаторы для каждого атрибута данных;
# • метод _ str _ (), который возвращает строковое значение, сообщающее о состоянии
# объекта.
class Book:
    def __init__(self, zagolovok, avtor, izdatel):
        self.__zagolovok = zagolovok
        self.__avtor = avtor
        self.__izdatel = izdatel

    def set_zagolovok(self, zagolovok):
        self.__zagolovok = zagolovok

    def set_avtor(self, avtor):
        self.__avtor = avtor

    def set_izdatel(self, izdatel):
        self.__izdatel = izdatel

    def get_zagolovok(self):
        return self.__zagolovok

    def get_avtor(self):
        return self.__avtor

    def get_izdatel(self):
        return self.__izdatel

    def __str__(self):
        return 'Заголовок:' + self.__zagolovok + \
               '\nАвтор:' + self.__avtor + \
               '\nИздатель:' + self.__izdatel


# Задача №2!
# Класс Pet.
# Напишите класс под названием Pet (Домашнее животное), который должен иметь приведенные
# ниже атрибуты данных:
# • _ name (для имени домашнего животного);
# • _animal_type (для типа домашнего животного; например, это может быть 'собака',
# 'кот' и 'птица');
# • _ age (для возраста домашнего животного).
# Класс Pet должен иметь метод _ ini t _ (), который создает эти атрибуты. Он также
# должен иметь приведенные ниже методы:
# • метод set name () присваивает значение полю _ name;
# • метод set_animal_type () присваивает значение полю _animal_type;
# • метод set_age () присваивает значение полю _age;
# • метод get name () возвращает значение полю _ name;
# • метод get animal t уре () возвращает значение полю _ animal t уре;
# • метод get_age () возвращает значение полю _age.
# После написания данного класса напишите программу, которая создает объект класса и
# предлагает пользователю ввести имя, тип и возраст своего домашнего животного. Эти
# данные должны храниться в качестве атрибутов объекта. Примените методы-получатели,
# чтобы извлечь имя, тип и возраст домашнего животного и показать эти данные на экране.
import animals


def main_1():
    # получим от пользователя имя,тип и возраст своего дом.животного
    name = input('Введи кличку животного: ')
    animal_type = input('Введи тип животного: ')
    age = int(input('Введи возраст животного: '))

    # создадим объект класса Пет и добавим в него полученные данные
    animal = animals.Pet(name, animal_type, age)

    # выведем эти данные на экран
    print('Полученные от пользователя данные!')
    print('----------------------------------')
    print('Кличка: ' + animal.get_name())
    print('Тип животного: ' + animal.get_animal_type())
    print('Возраст животного: ', animal.get_age(), 'год(а)')
    print('----------------------------------')


# main_1()

# Задача №3!
# Класс Car. Напишите класс под названием Car (Легковой автомобиль), который имеет
# приведенные ниже атрибуты данных:
# • _year model (для модели указанного года выпуска);
# • rttake (для фирмы-изготовителя автомобиля);
# • _ speed (для текущей скорости автомобиля).
# Класс car должен иметь метод _ ini t _ (), который в качестве аргументов принимает
# модель указанного года выпуска и фирму-изготовителя. Эти значения должны быть присвоены
# атрибутам данных _year_model и _make объекта. Он также должен присвоить О
# атрибуту данных _ speed.
# Этот класс также должен иметь методы:
# • метод accelerate () (ускоряться) при каждом его вызове должен прибавлять 5 в атрибут
# данных _ speed;
# • метод break () (тормозить) при каждом его вызове должен вычитать 5 из атрибута
# данных speed;
# • метод get speed () (получить скорость) должен возвращать текущую скорость.
# Далее разработайте программу, которая создает объект car и пятикратно вызывает метод
# accelerate ().После каждого вызова метода accelerate () она должна получать текущую
# 572 Глава 10. Классы и объектно-ориентированное программирование
# скорость автомобиля и выводить ее на экран. Затем она должна пятикратно вызвать
# метод break () . После каждого вызова метода break () она должна получать текущую
# скорость автомобиля и выводить ее на экран.
import avto


def main_2():
    # получим данные от пользователя
    year_model = int(input('Введи год выпуска авто: '))
    proizv = input('Введи производителя авто: ')
    speed = 0  # предположим,что автомобиль стоит

    # создадим экземпляр класса Авто
    my_car = avto.Avto(year_model, proizv, speed)

    # создадим цикл для пятикратного вызова ускорения
    for count in range(5):
        print('Ускоряемся...')
        my_car.accelerate()
        print('Текущая скорость автомобиля равна: ', my_car.get_speed(), 'км/ч')

    print('------------------------')

    # создадим цикл для пятикратного торможения
    for count in range(5):
        print('Тормозим...')
        my_car.tormoz()
        print('Текущая скорость автомобиля равна: ', my_car.get_speed(), 'км/ч')


# main_2()


# Задача №4!
# Класс персональных данных Infoпnation. Разработайте класс, который содержит
# следующие персональные данные: имя, адрес, возраст и телефонный номер. Напишите
# соответствующие методы-получатели и методы-модификаторы. Кроме того, напишите
# программу, которая создает три экземпляра класса. Один экземпляр должен содержать
# информацию о вас, а два других - информацию о ваших друзьях или членах семьи.
import family_info

KOL = 3


def main_3():
    # получим данные от пользователя по трем людям при помощи цикла и запишем в список
    # создадим пустой список
    family_list = []

    # создадим цикл для получения информации по каждому человеку,создадим нужное кол-во объектов,
    # и поместим эти объекты в список
    for person in range(KOL):
        name = input('Enter name: ')
        address = input('Enter address: ')
        age = int(input('Enter age: '))
        phone = int(input('Enter phone: '))

        # создадим объект класса Инфо
        individ = family_info.Information(name, address, age, phone)

        # добавим объект в список
        family_list.append(individ)
        print('Данные записываются...')

    print('Все данные записаны!')

    print(family_list)


# main_3()

import na_rabote


def main_4():
    # создадим объект первого сотрудника
    name = 'Suzan Mayers'
    id = '47899'
    otdel = 'Buhgaltery'
    pos = 'Vice-President'
    employer_1 = na_rabote.Sotrudnik(name, id, otdel, pos)

    # создадим объект второго сотрудника
    name = 'Mark Jowns'
    id = '39119'
    otdel = 'IT'
    pos = 'Developer'
    employer_2 = na_rabote.Sotrudnik(name, id, otdel, pos)

    # создадим объект третьего сотрудника
    name = 'Joy Rogers'
    id = '81774'
    otdel = 'Manufact'
    pos = 'Engineer'
    employer_3 = na_rabote.Sotrudnik(name, id, otdel, pos)

    # выведем данные по всем сотрудникам на экран
    print('Данные по сотрудникам представлены ниже.')
    print('----------------------------------------')
    print('Имя:' + employer_1.get_name() + \
          '\nID:' + employer_1.get_id() + \
          '\nОтдел:' + employer_1.get_otdel() + \
          '\nДолжность:' + employer_1.get_doljnost())
    print('----------------------------------------')
    print('Имя:' + employer_2.get_name() + \
          '\nID:' + employer_2.get_id() + \
          '\nОтдел:' + employer_2.get_otdel() + \
          '\nДолжность:' + employer_2.get_doljnost())
    print('----------------------------------------')
    print('Имя:' + employer_3.get_name() + \
          '\nID:' + employer_3.get_id() + \
          '\nОтдел:' + employer_3.get_otdel() + \
          '\nДолжность:' + employer_3.get_doljnost())
    print('----------------------------------------')


# main_4()

# Задача №5!
# Напишите класс под названием Retailltem (Розничная товарная
# единица), который содержит данные о товаре в розничном магазине. Этот класс должен
# хранить данные в атрибутах: описание товара, количество единиц на складе и цена.
# После написания этого класса напишите программу, которая создает три объекта Retailltem
# и сохраняет в них приведенные в табл. 10.2 данные.
import shmotki


def main_5():
    print('Данные по товару в магазине оджеды')
    print('----------------------------------')
    # пропишем данные по первому товару
    opisanie = 'Пиджак'
    kol = 12
    cena = 59.95

    # создадим объект класса
    pidjak = shmotki.RetailItem(opisanie, kol, cena)

    # выведем данные объекта на экран
    print(pidjak)
    print('----------------------------------')
    # пропишем данные по второму товару
    opisanie = 'Дизайнерские джинсы'
    kol = 40
    cena = 34.95

    # создадим объект класса
    jins = shmotki.RetailItem(opisanie, kol, cena)

    # выведем данные объекта на экран
    print(jins)
    print('----------------------------------')
    # пропишем данные по третьему товару
    opisanie = 'Рубашка'
    kol = 20
    cena = 24.95

    # создадим объект класса
    rubashka = shmotki.RetailItem(opisanie, kol, cena)

    # выведем данные объекта на экран
    print(rubashka)
    print('----------------------------------')


# main_5()

# Задача №6!
# Расходы на лечение. Напишите класс под названием Patient (Пациент), который имеет
# атрибуты для приведенных ниже данных:
# • имя, отчество и фамилия;
# • адрес, город, область и почтовый индекс;
# • телефонный номер;
# • имя и телефон контактного лица для экстренной связи.
# Глава 10. Классы и объектно-ориентированное программирование 573
# Метод init () класса Patient должен принимать аргумент для каждого атрибута.
# Класс Patient также должен для каждого атрибута иметь методы-получатели и методымодификаторы.
# Затем напишите класс Procedure, который представляет пройденную пациентом медицинскую
# процедуру. Класс Procedure должен иметь атрибуты для приведенных ниже
# данных:
# • название процедуры;
# • дата процедуры;
# • имя врача, который выполнял процедуру;
# • стоимость процедуры.
# Метод_ ini t _ () класса Procedure должен принимать аргумент для каждого атрибута.
# Класс Procedure также должен для каждого атрибута иметь методы-получатели и методы-
# модификаторы. Далее напишите программу, которая создает экземпляр класса
# Patient, инициализированного демонстрационными данными. Затем создайте три экземпляра
# класса Procedure, инициализированного приведенными в табл. 10.3 данными.
# Программа должна вывести на экран информацию о пациенте, сведения обо всех трех
# процедурах и об общей стоимости всех трех процедур.
import hospital


def main_6():
    # получим данные о пациенте и выведем их на экран
    fio = 'Шевченко Тарас Григорьевич'
    address = 'ул.Мира 5, г.Одесса, Одесская обл, 87056'
    phone_client = '0661002030'
    extra_contcat = 'Иван Франко, 0505006070'

    # создадим экземпляр класса (клиент)
    client = hospital.Patient(fio, address, phone_client, extra_contcat)

    # по условиям задачи клиент пройдет три процедуры,
    # получим инфу по каждой из них
    # первая процедура клиента
    name = 'Врачебный осмотр'
    data = '10.03.2022'
    doctor = 'Ирвин'
    price = 250.00
    # создадим объект первой процедуры
    first_procedura = hospital.Procedure(name, data, doctor, price)

    # вторая процедура клиента
    name = 'Рентгеноскопия'
    data = '10.03.2022'
    doctor = 'Джемисон'
    price = 500.00
    # создадим объект второй процедуры
    second_procedura = hospital.Procedure(name, data, doctor, price)

    # третья процедура клиента
    name = 'Анализ крови'
    data = '10.03.2022'
    doctor = 'Смит'
    price = 200.00
    # создадим объект третьей процедуры
    third_procedura = hospital.Procedure(name, data, doctor, price)

    # выведем на эран данные по клиенту
    print('ДАННЫЕ ПО КЛИЕНТУ')
    print('-----------------')
    print(client)
    print('-----------------')

    # выведем на экран процедуры, которые он прошел
    print(first_procedura)
    print('-----------------')
    print(second_procedura)
    print('-----------------')
    print(third_procedura)
    print('-----------------')

    # посчитаем и выведем на экран общую стоимость всех процедур
    print('Общая стоимость всех процедур состоавляет: ', first_procedura.get_stoimost() + \
          second_procedura.get_stoimost() + \
          third_procedura.get_stoimost(), 'usd')


# main_6()

# Задача №7!
# Система управления персоналом. Это упражнение предполагает создание класса
# Employee из задачи 4 по программированию. Создайте программу, которая сохраняет
# объекты Employee в словаре. Используйте идентификационный номер сотрудника в качестве
# ключа. Программа должна вывести меню, которое позволяет пользователю:
# • найти сотрудника в словаре;
# • добавить нового сотрудника в словарь;
# • изменить имя, отдел и должность существующего сотрудника в словаре;
# • удалить сотрудника из словаря;
# • выйти из программы.
# По завершении работы программа должна законсервировать словарь и сохранить его
# в файле. При каждом запуске программы она должна попытаться загрузить законсервированный
# словарь из файла. Если файл не существует, то программа должна начать
# работу с пустого словаря.
import personal_info
import pickle

# заведем глобальные константы для пунктов меню
FIND_PERSON = 1
ADD_PERSON = 2
CHANGE_PERSON = 3
DELETE_PERSON = 4
EXIT = 5


def main_7():
    # инициализируем переменную выбора меню,присвоив ей ноль
    user_choice = 0

    # вызовем словарь и присоим его другой переменной
    dict = load_dict()

    # запустим цикл для меню
    while user_choice != EXIT:
        # возвращаем сюда выбор пользователя из функции меню
        user_choice = menu()

        # в зависимости от выбора запускаем нужную функцию
        if user_choice == 1:
            searching(dict)
        elif user_choice == 2:
            adding(dict)
        elif user_choice == 3:
            changing(dict)
        elif user_choice == 4:
            delete_user(dict)

    save_dict(dict)


# создадим меню
def menu():
    print('МЕНЮ ПРОГРАММЫ')
    print('--------------')
    print('1.Найти контакт')
    print('2.Добавить контакт')
    print('3.Изменить контакт')
    print('4.Удалить контакт')
    print('5.Выход из программы')
    print('--------------------')

    # запросим у пользователя выбор пункта меню
    user_choice = int(input('Выбери пункт из меню: '))

    # проверим выбор на корректность
    while user_choice < FIND_PERSON or user_choice > EXIT:
        user_choice = int(input('Выбери пункт из меню: '))

    # вернем выбор пользователя из функции
    return user_choice


# создадим функцию поиска человека из словаря
def searching(some_dict):
    # будем искать человека по его айди
    id = int(input('Введи ID сотрудника для поиска: '))
    print(some_dict.get(id, 'Нет человека с таким АЙДИ!'))


def adding(some_dict):
    # получим данные человека для добавления
    name = input('Ввеи имя сотрудника: ')
    pos = input('Введи его должность: ')
    id = int(input('Введи ID сотрудника для добавления: '))

    # создадим новый объект класса Персонал
    new_person = personal_info.Human(name, pos, id)
    if id not in some_dict:
        some_dict[id] = new_person
        print('Сотрудник добавлен!')
    else:
        print('Уже есть человек с таким АЙДИ!')


def changing(some_dict):
    id = int(input('Введи АЙДИ сотрудника: '))
    if id in some_dict:
        # введем новую инфу по этому сотруднику
        new_name = input('Введи другое имя: ')
        new_pos = input('Введи новую доолжность: ')

        # создадим новый объект
        new_person = personal_info.Human(new_name, new_pos, id)

        # обновим сотрудника
        some_dict[id] = new_person
        print('Информация по сотруднику изменена!')
    else:
        print('Нет такого сотрудника!')


def delete_user(some_dict):
    id = int(input('Введи АЙДИ человека, которого хочешь удалить: '))
    if id in some_dict:
        del some_dict[id]
        print('Информация о человеке удалена!')
    else:
        print('Нет такого человека!')


# создадим функцию загрузки словаря с данными людей
def load_dict():
    # попытаемся открыть файл и загрузить словарь
    try:
        file = open('D:\Фильмы\c_rabota.dat', 'rb')
        some_dict = pickle.load(file)
        file.close()
    except IOError:
        # в противном случае создаем пустой словарь
        some_dict = {}
    return some_dict


def save_dict(some_dict):
    file = open('D:\Фильмы\c__dannie.dat', 'wb')
    pickle.dump(some_dict, file)
    file.close()


# main_7()

# Задача №8!
# Класс cashReqi.ster. Это упражнение предполагает создание класса Retailitem из задачи
# 5 по программированию. Создайте класс CashRegister (Кассовый аппарат), который
# может использоваться вместе с классом Retailitem. Класс cashRegister должен иметь
# внутренний список объектов Retailitem, а также приведенные ниже методы.
# • Метод purchase item () (приобрести товар) в качестве аргумента принимает объект
# Retailrtem. При каждом вызове метода purchase_item() объект Retailrtem, переданный
# в качестве аргумента, должен быть добавлен в список.
# • Метод get total () (получить сумму покупки) возвращает общую стоимость всех
# объектов Retailrtem, хранящихся во внутреннем списке объекта CashRegister.
# • Метод show items () (показать товары) выводит данные об объектах Retailrtem,
# хранящихся во внутреннем списке объекта cashRegister.
# • Метод clear () (очистить) должен очистить внутренний список объекта CashRegister.
# Продемонстрируйте класс CashRegister в программе, которая позволяет пользователю
# выбрать несколько товаров для покупки. Когда пользователь готов рассчитаться за покупку,
# программа должна вывести список всех товаров, которые он выбрал для покупки,
# а также их общую стоимость.
import phones_retail
import kassa


def main_8():
    # создадим несколько товаров , которые можно купить в магазине
    # товар №1
    proizv = 'apple'
    nomer = '13'
    price = 1200.00
    iphone_13 = phones_retail.Mobile(proizv, nomer, price)
    print(iphone_13)
    print('---------')

    # товар №2
    proizv = 'lenovo notebook'
    nomer = '525'
    price = 1350.00
    lenovo_525 = phones_retail.Mobile(proizv, nomer, price)
    print(lenovo_525)
    print('---------')

    # создадим цикл для покупок в магазине
    answer = 'y'
    some_list = []
    while answer.upper() == 'Y':
        offer = input('Какой товар добавить в список покупок?')
        spisok_pokupok = kassa.CashRegister(some_list, offer)

        answer = input('press y or Y to continue...')
        print(spisok_pokupok)


# main_8()


# Задача №9!
# Викторина. В этой задаче по программированию следует создать простую викторину для
# двух игроков. Программа будет работать следующим образом.
# • Начиная с игрока 1, каждый игрок по очереди отвечает на 5 вопросов викторины.
# (Должно быть в общей сложности 10 вопросов.) При выводе вопроса на экран также
# выводятся 4 возможных ответа. Только один из этих ответов является правильным,
# и если игрок выбирает правильный ответ, то он зарабатывает очко.
# • После того как были выбраны ответы на все вопросы, программа показывает количество
# очков, заработанное каждым игроком, и объявляет игрока с наибольшим количеством
# очков победителем.
# Для создания этой программы напишите класс Question (Вопрос), который будет содержать
# данные о вопросе викторины. Класс Question должен иметь атрибуты для приведенных
# ниже данных:
# • вопрос викторины;
# • возможный ответ 1;
# • возможный ответ 2;
# • возможный ответ 3;
# • возможный ответ 4;
# • номер правильного ответа ( 1, 2, 3 или 4 ).
# Класс Question также должен иметь соответствующий метод
# получатели и методы-модификаторы.
# ini t () , методы-
# Программа должна содержать список или словарь с 10 объектами Question, один для
# каждого вопроса викторины. Составьте для объектов собственные вопросы викторины по
# теме или темам по вашему выбору.
import viktorina


def main_9():
    # создадим 10 объектов с вопросами,возможномы ответами и выбором ответа
    player_1 = 0
    player_2 = 0
    # объект №1
    # атрибуты объекта
    question_1 = 'В каком году Арсенал последний раз брал АПЛ?'
    answ_1 = '2004'
    answ_2 = '2009'
    answ_3 = '2001'
    answ_4 = '2015'
    right = '2004'
    # создание оъекта
    obj_1 = viktorina.Question(question_1, answ_1, answ_2, answ_3, answ_4, right)
    # запускаем викторину!
    print(obj_1.get_vopros())
    print(obj_1.get_otvet1(), obj_1.get_otvet2(), obj_1.get_otvet3(), obj_1.get_otvet4())
    user_choice = input('Напиши свой ответ: ')
    if user_choice == right:
        player_1 += 1
        print('Правильно!')
    else:
        print('Неправильно!')
    print()

    # объект №2
    # атрибуты объекта
    question_2 = 'В каком клубе начинал Джеймс Милнер?'
    answ_1 = 'Мидлсбро'
    answ_2 = 'Вестхэм'
    answ_3 = 'Астон Вилла'
    answ_4 = 'Ман Сити'
    right = 'Астон Вилла'
    # создание оъекта
    obj_2 = viktorina.Question(question_2, answ_1, answ_2, answ_3, answ_4, right)

    # запускаем викторину!
    print(obj_2.get_vopros())
    print(obj_2.get_otvet1(), obj_2.get_otvet2(), obj_2.get_otvet3(), obj_2.get_otvet4())
    user_choice = input('Напиши свой ответ: ')
    if user_choice == right:
        player_2 += 1
        print('Правильно!')
    else:
        print('Неправильно!')
    print()

    # объект №3
    # атрибуты объекта
    question_3 = 'Первое имя Куна Агуэро?'
    answ_1 = 'Сэрхио'
    answ_2 = 'Роберто'
    answ_3 = 'Донни'
    answ_4 = 'Мигель'
    right = 'Сэрхио'
    # создание оъекта
    obj_3 = viktorina.Question(question_3, answ_1, answ_2, answ_3, answ_4, right)

    # запускаем викторину!
    print(obj_3.get_vopros())
    print(obj_3.get_otvet1(), obj_3.get_otvet2(), obj_3.get_otvet3(), obj_3.get_otvet4())
    user_choice = input('Напиши свой ответ: ')
    if user_choice == right:
        player_1 += 1
        print('Правильно!')
    else:
        print('Неправильно!')
    print()

    # объект №4
    # атрибуты объекта
    question_4 = 'Самый успешный тренер в истории АПЛ?'
    answ_1 = 'Венгер'
    answ_2 = 'Фергюсон'
    answ_3 = 'Гвардиола'
    answ_4 = 'Моуриньо'
    right = 'Фергюсон'
    # создание оъекта
    obj_4 = viktorina.Question(question_4, answ_1, answ_2, answ_3, answ_4, right)

    # запускаем викторину!
    print(obj_4.get_vopros())
    print(obj_4.get_otvet1(), obj_4.get_otvet2(), obj_4.get_otvet3(), obj_4.get_otvet4())
    user_choice = input('Напиши свой ответ: ')
    if user_choice == right:
        player_2 += 1
        print('Правильно!')
    else:
        print('Неправильно!')
    print()

    # объект №5
    # атрибуты объекта
    question_5 = 'Сколько раз Моуриньо возвращался в Челси?'
    answ_1 = '1'
    answ_2 = '2'
    answ_3 = '3'
    answ_4 = '4'
    right = '1'
    # создание оъекта
    obj_5 = viktorina.Question(question_5, answ_1, answ_2, answ_3, answ_4, right)

    # запускаем викторину!
    print(obj_5.get_vopros())
    print(obj_5.get_otvet1(), obj_5.get_otvet2(), obj_5.get_otvet3(), obj_5.get_otvet4())
    user_choice = input('Напиши свой ответ: ')
    if user_choice == right:
        player_1 += 1
        print('Правильно!')
    else:
        print('Неправильно!')
    print()

    # объект №6
    # атрибуты объекта
    question_6 = 'В каком клубе играл Фабрегас после Барселоны?'
    answ_1 = 'Арсенал'
    answ_2 = 'Челси'
    answ_3 = 'Ман Сити'
    answ_4 = 'Ливерпуль'
    right = 'Челси'
    # создание оъекта
    obj_6 = viktorina.Question(question_6, answ_1, answ_2, answ_3, answ_4, right)

    # запускаем викторину!
    print(obj_6.get_vopros())
    print(obj_6.get_otvet1(), obj_6.get_otvet2(), obj_6.get_otvet3(), obj_6.get_otvet4())
    user_choice = input('Напиши свой ответ: ')
    if user_choice == right:
        player_2 += 1
        print('Правильно!')
    else:
        print('Неправильно!')
    print()

    # объект №7
    # атрибуты объекта
    question_7 = 'С каким счетом проиграл Венгер свой 1000-1 матч у руля Арсенала?'
    answ_1 = '0-1'
    answ_2 = '0-2'
    answ_3 = '0-4'
    answ_4 = '0-6'
    right = '0-6'
    # создание оъекта
    obj_7 = viktorina.Question(question_7, answ_1, answ_2, answ_3, answ_4, right)

    # запускаем викторину!
    print(obj_7.get_vopros())
    print(obj_7.get_otvet1(), obj_7.get_otvet2(), obj_7.get_otvet3(), obj_7.get_otvet4())
    user_choice = input('Напиши свой ответ: ')
    if user_choice == right:
        player_1 += 1
        print('Правильно!')
    else:
        print('Неправильно!')
    print()

    # объект №8
    # атрибуты объекта
    question_8 = 'Сколько раз Джерард поднимал над головой кубок АПЛ?'
    answ_1 = '0'
    answ_2 = '1'
    answ_3 = '2'
    answ_4 = '3'
    right = '0'
    # создание оъекта
    obj_8 = viktorina.Question(question_8, answ_1, answ_2, answ_3, answ_4, right)

    # запускаем викторину!
    print(obj_8.get_vopros())
    print(obj_8.get_otvet1(), obj_8.get_otvet2(), obj_8.get_otvet3(), obj_8.get_otvet4())
    user_choice = input('Напиши свой ответ: ')
    if user_choice == right:
        player_2 += 1
        print('Правильно!')
    else:
        print('Неправильно!')
    print()

    # объект №9
    # атрибуты объекта
    question_9 = 'Кому принадлежит фраза:"Сколько раз ты брал АПЛ?"?'
    answ_1 = 'Ван Перси'
    answ_2 = 'Джерард'
    answ_3 = 'Лампард'
    answ_4 = 'Балотелли'
    right = 'Ван Перси'
    # создание оъекта
    obj_9 = viktorina.Question(question_9, answ_1, answ_2, answ_3, answ_4, right)

    # запускаем викторину!
    print(obj_9.get_vopros())
    print(obj_9.get_otvet1(), obj_9.get_otvet2(), obj_9.get_otvet3(), obj_9.get_otvet4())
    user_choice = input('Напиши свой ответ: ')
    if user_choice == right:
        player_1 += 1
        print('Правильно!')
    else:
        print('Неправильно!')
    print()

    # объект №10
    # атрибуты объекта
    question_10 = 'Что нарисовано на эмблеме Тоттенхема?'
    answ_1 = 'Лес'
    answ_2 = 'Солнце'
    answ_3 = 'Звезда Давида'
    answ_4 = 'Петух'
    right = 'Петух'
    # создание оъекта
    obj_10 = viktorina.Question(question_10, answ_1, answ_2, answ_3, answ_4, right)

    # запускаем викторину!
    print(obj_10.get_vopros())
    print(obj_10.get_otvet1(), obj_10.get_otvet2(), obj_10.get_otvet3(), obj_10.get_otvet4())
    user_choice = input('Напиши свой ответ: ')
    if user_choice == right:
        player_2 += 1
        print('Правильно!')
    else:
        print('Неправильно!')
    print()

    # заведем список объектов
    question_list = [question_1, question_2, question_3,
                     question_4, question_5, question_6,
                     question_7, question_8, question_9,
                     question_10]

    print('Игрок №1 набрал: ', player_1, 'очков')
    print('Игрок №2 набрал: ', player_2, 'очков')
    if player_1 > player_2:
        print('Победа игрока №1!')
    elif player_1 == player_2:
        print('Ничья!')
    else:
        print('Победа игрока №2!')


#main_9()
