# Эта программа показывает пустое окно
import tkinter


def main_1():
    # Создадим элемент интерфейса главного окна
    main_window = tkinter.Tk()

    # войдем в главный цикл tkinter
    tkinter.mainloop()


# main_1()

# создадим пустое окно ,используя ООП
# импортируем модуль,в котором находится нужный класс
import empty_window_2


def main_2():
    # создадим объект класса
    main_window = empty_window_2.MyWindow()


# запустим программу
# main_2()


#                     ВЫВОД ТЕКСТА ПРИ ПОМОЩИ ЭЛЕМЕНТА ИНТЕРФЕЙСА LABEL

import win_and_text


def main_3():
    # создадим экземпляр класса
    interface = win_and_text.MyGUI()


# main_3()

import win_text_1


def main_4():
    # создадим экземпляр класса
    my_interface = win_text_1.MyGUI()


# main_4()

import win_text_2


def main_5():
    # создадим экземпляр класса
    my_interface = win_text_2.MyGUI()


# main_5()

import win_text_3


def main_6():
    # создадим экземпляр класса
    inf = win_text_3.MyGUI()


# main_6()

# УПОРЯДОЧЕНИЕ ЭЛЕМЕНТОВ ИНТЕРФЕЙСА ПРИ ПОМОЩИ РАМОК Frame

# Элемент интерфейса Frame является контейнером, который может содержать другие элементы
# интерфейса. Рамки Frame применяются для упорядочения элементов интерфейса
# в окне.

import frames_demo


def main_7():
    # создадим элемент класса
    inter = frames_demo.MyGUI()


# main_7()

import frames_demo_2


def main_8():
    inter = frames_demo_2.MyGUI()


# main_8()

#              Элементы интерфейса Button и информационные диалоговые окна
# Элемент интерфейса Button используется для создания в окне стандартной кнопки. Когда
# пользователь нажимает кнопку, вызывается заданная функция или метод.

import squeeze


def main_9():
    my_interface = squeeze.MyGUI()


# main_9()

import knopka


def main_10():
    my_interface = knopka.Knopa()


# main_10()

import knopka_surprise


def main_11():
    interface = knopka_surprise.Surprise()


# main_11()

import go_or_exit


def main_12():
    adventure = go_or_exit.Bar()


# main_12()

import knopka_2


def main_13():
    start = knopka_2.Start()


# main_13()

#         ПОЛУЧЕНИЕ ВХОДНЫХ ДАННЫХ ПРИ ПОМОЩИ ЭЛЕМЕНТА ИНТЕРФЕЙСА ENTRY

# Элемент интерфейса Entry - это прямоугольная область, в которую пользователь может
# вводить входные данные. Для извлечения данных, введенных в элемент интерфейса
# Entry, используется его метод get ().

import change_km_to_ml


def main_14():
    there_you_go = change_km_to_ml.Change()


# main_14()

import bottles_to_litr


def Chaus():
    calk = bottles_to_litr.Beer()


# Chaus()

# ПРИМЕНЕНИЕ ЭЛЕМЕНТОВ LABEL В КАЧЕСТВЕ ПОЛЕЙ ВЫВОДА

import kilo_convert


def main_15():
    interface = kilo_convert.Changer()


# main_15()

import calc_retail


def main_16():
    calc = calc_retail.RetailPrice()


# main_16()


#                              СОЗДАНИЕ ПРОГРАММЫ С GUI

# программа ,считающая среднюю оценку ученика
import my_points


def main_17():
    middle_point = my_points.Points()


# main_17()

import sum_komun


def main_18():
    calculate = sum_komun.Komunal()


# main_18()

#                      РАДИОКНОПКИ И ФЛАГОВЫЕ КНОПКИ
import radio_button


def main_19():
    choice = radio_button.MyGUI()


# main_19()

import radio_test


def main_20():
    pivo_test = radio_test.Test()


# main_20()

import my_evening


def main_21():
    my_event = my_evening.MyEvent()


# main_21()

import auto_school


def main_22():
    test = auto_school.Test()


# main_22()

#                                   ФЛАГОВЫЕ КНОПКИ

import flag_squeeze


def main_23():
    queeze = flag_squeeze.Choose()


# main_23()

import school_test


def main_24():
    test_result = school_test.SchoolTest()


# main_24()


#        РИСОВАНИЕ ФИГУР ПРИ ПОМОЩИ ЭЛЕМЕНТА ИНТЕРФЕЙСА CANVAS

# Элемент интерфейса canvas предоставляет методы для рисования простых фигур, таких
# как линии, прямоугольники, овалы, многоугольники и т. д.

import draw_line


def main_25():
    draw = draw_line.Line()


# main_25()

import draw_line_2


def main_26():
    my_pic = draw_line_2.DrawLine()


# main_26()

import set_lines


def main_27():
    my_pic = set_lines.SetLines()


# main_27()


#                      РИСОВАНИЕ ПРЯМОУГОЛЬНИКОВ

import draw_rectangle


def main_28():
    pic = draw_rectangle.DrawRectangle()


# main_28()


#                                 РИСОВАНИЕ ОВАЛОВ

import draw_oval


def main_29():
    pic = draw_oval.Oval()


# main_29()


#                                     РИСОВАНИЕ ДУГ

import draw_arc


def main_30():
    pic = draw_arc.DrawArc()


# main_30()


#                               РИСОВАНИЕ МНОГОУГОЛЬНИКОВ

import draw_poligons


def main_31():
    pic = draw_poligons.Polygon()


# main_31()


#                                   РИСОВАНИЕ ТЕКСТА

import draw_text


def main_32():
    pic = draw_text.Text()


# main_32()

# Task#1
# Напишите инструкцию, которая создает элемент интерфейса Label. Его родительским
# элементом должен быть элемент self .main window, и он должен содержать текст
# 'Программировать - это круто! '.
import for_text


def task_1():
    my_GUI = for_text.Task_1()


# task_1()

# Task#2
# Допустим, что self. labell и self. label2 ссылаются на два элемента интерфейса Label.
# Напишите фрагмент кода, который упаковывает эти два элемента таким образом, чтобы
# они были расположены в своем родительском элементе интерфейса максимально слева.
import fore_text_2


def task_2():
    myGUI = fore_text_2.Text()


# task_2()

# Task#3
# Напишите инструкцию, которая создает элемент интерфейса Button. Его родительским
# элементом должен быть self .button_frame, его текст должен содержать строковый
# литерал 'вычислить ', и его функцией обратного вызова должен быть метод
# self. calculate ().
import task_3


def task_3_1():
    my_GUI = task_3.Knopka()


# task_3_1()

# TASK 4
# Напишите инструкцию, которая создает элемент интерфейса Button, закрывающий
# программу при его нажатии. Его родительским элементом должен быть элемент
# se l f . bu t ton f r ame, и он должен содержать текст ' Выйти' .
import knopka_exit


def task_4():
    myGUI = knopka_exit.ExitButton()


# task_4()

# TASK 5
# Допустим, что переменная data entry ссылается на элемент интерфейса Entry. Напишите
# инструкцию, которая извлекает значение из этого элемента, приводит его к типу int
# и присваивает его переменной с именем var.
import field_entry


def task_5():
    myGUI = field_entry.Field()


# task_5()


# TASK 6
# Допустим, что в программе приведенная ниже инструкция создает элемент интерфейса
# Canvas и присваивает его переменной self. canvas:
# self.canvas = tkinter.Canvas(self.main_window, width=200, height=200)
# Напишите инструкции, которые делают следующее:
# • чертят синюю прямую из левого верхнего угла элемента Canvas в его правый нижний
# угол, прямая должна быть шириной 3 пиксела;
# • чертят прямоугольник с красным контуром и черным заполнением, углы прямоугольника
# должны располагаться на холсте в приведенных ниже позициях:
# 0 левый верхний: (50, 50);
# 0 правый верхний: (100, 50);
# 0 левый нижний: (50, 100);
# 0 правый нижний: (100, 100);
# • чертят зеленый круг, центральная точка круга должна быть в координатах (100, 100),
# а ее радиус должен равняться 50;
# • чертят заполненную синим цветом дугу, заданную ограничивающим прямоугольником,
# чей левый верхний угол находится в координатах (20, 20), правый нижний
# угол - в координатах (180, 180). Дуга должна начинаться в 0° и простираться на 90°.
import task_draw


def task_6():
    draw = task_draw.DrawTask()


# task_6()

# ЗАДАЧИ ПО ПРОГРАММИРОВАНИЮ
# Задача №1
# ФИО и адрес. Напишите программу с GUI, которая при нажатии кнопки выводит на
# экран ваше полное имя и адрес. При запуске программы ее окно должно выглядеть так,
# как на эскизе с левой стороны рис. 13.42. Когда пользователь нажимает кнопку Показать
# инфо, программа должна вывести на экран ваше имя и адрес, как показано на эскизе справа.
import person_GUI


def prog1():
    adress = person_GUI.Info()


# prog1()

# Задача №2
# Напишите программу с GUI, которая переводит латинские слова на русский язык. Окно
# должно иметь три кнопки, по одной для каждого латинского слова (рис. 13.43). Когда
# пользователь нажимает кнопку, программа должна выводить на экран русский перевод
# в элемент интерфейса Label.
import translator


def prog2():
    myGUI = translator.WordsTranslator()


# prog2()

# Задача №3
# Калькулятор миль на галлон бензина. Напишите программу с GUI, которая вычисляет
# экономичность автомобиля. Окно программы должно содержать элементы интерфейса
# Entry, которые позволяют пользователю вводить объем бензина в галлонах, заправленного
# в автомобиль, и количество миль, которые он может пройти с полным баком
# (рис. 13.44). При нажатии кнопки Вычислить MGP программа должна вывести на экран
# количество миль, которые автомобиль может пройти в расчете на галлон бензина.
# Для вычисления показателя количества миль на галлон примените приведенную ниже
# формулу:
# мили
# Показатель миль на галлоны = ----
# галлоны
import gaz_calc


def prog_3():
    calc = gaz_calc.OilCalculator()


# prog_3()

# Задача #4
# Из шкалы Цельсия в шкалу Фаренгейта. Напишите программу с GUI, которая преобразует
# показания температуры по шкале Цельсия в температуру по шкале Фаренгейта.
# Пользователь должен иметь возможность вводить температуру по шкале Цельсия, нажимать
# кнопку и затем получать эквивалентную температуру по шкале Фаренгейта
# (рис. 13.45). Для выполнения этого преобразования примените приведенную ниже формулу:
# 9
# F=-C+32,
# 5
# где F - это температура по Фаренгейту; С - температура по шкале Цельсия.
import temperature


def prog_4():
    changer = temperature.Farentgate()


# prog_4()

# Задача №5

# Налоr на недвижимость. Территориальный округ собирает налоги на недвижимое имущество,
# опираясь на оценочную стоимость имущества, которая составляет 60% фактической
# стоимости недвижимого имущества. Если акр земли оценивается в $1 О ООО, то его
# оценочная стоимость составляет $6000. Налог на имущество в таком случае составит
# $0. 75 для каждого $100 оценочной стоимости. Налог на акр, оцененный в $6000, составит
# $45.00. Напишите программу с GUI, которая выводит на экран оценочную стоимость
# и налог на недвижимое имущество при вводе пользователем фактической стоимости
# недвижимого имущества (рис. 13.46).
import properties_tax


def prog_5():
    properties_info = properties_tax.Tax()


# prog_5()

# Задача №6
# Авторемонтная фирма "Автоцех". Авторемонтная фирма "Автоцех" предлагает услуги
# по регламентному техобслуживанию:
# • замена масла - 500.00 руб.;
# • смазочные работы - 300.00 руб.;
# • промывка радиатора- 700.00 руб.;
# • замена жидкости в трансмиссии - 1000.00 руб.;
# • осмотр - 800.00 руб.;
# • замена глушителя выхлопа- 1300.00 руб.;
# • перестановка шин - 1300.00 руб.
# Напишите программу с GUI с использованием флаговых кнопок, которые позволяют
# пользователю выбирать любые из этих видов услуг. При нажатии пользователем кнопки
# должна быть выведена общая стоимость услуг (рис. 13.47).
import auto_service


def prog_6():
    calc_sum = auto_service.AutoRepair()


# prog_6()

# Задача №7
# Междугородные звонки. Провайдер междугородних звонков взимает плату за телефонные
# вызовы в соответствии с приведенными в табл. 13 .13 тарифами.
# Таблица 13.13
# Категория тарифа Тариф в минуту, руб.
# Дневное время (с 6:00 до 17:59) 10
# Вечернее время (с 18:00 до 23:59) 12
# Непиковый период (с полуночи до 5:59) 5
# Напишите приложение с GUI, которое позволяет пользователю выбирать категорию
# уровня (из набора радиокнопок) и вводить в элемент интерфейса Entry продолжительность
# вызова в минутах. Информационное диалоговое окно должно выводить на экран
# стоимость вызова (рис. 13.48).
import phone_operator


def prog_7():
    tarif = phone_operator.PhoneProvider()


# prog_7()

# Задача №8
# Рисунок старого дома. Примените элемент интерфейса Canvas, с которым вы познакомились
# в этой главе, чтобы нарисовать дом. Рисунок дома должен содержать по меньшей
# мере два окна и дверь. Можно добавить и другие объекты, такие как небо, солнце и даже
# облака (рис. 13.49).
import draw_home


def prog_8():
    my_picture = draw_home.Facility()


# prog_8()

# Задача №9
# Возраст дерева. Подсчет годичных колец дерева дает довольно точное представление
# о возрасте дерева. Каждое годичное кольцо образуется за один год. Примените элемент
# интерфейса Canvas, чтобы показать на рисунке, как могли бы выглядеть годичные кольца
# 5-летнего дерева. Затем, используя метод crea te text (), пронумеруйте каждое
# годичное кольцо, начиная с центра и далее продолжая наружу, указывая возраст в годах,
# связанный с этим кольцом (рис. 13.50).
import tree_age


def prog_9():
    my_pic = tree_age.DrawTreeAge()


#prog_9()

# Задача №10
# Голливудская звезда. Создайте собственную звезду на Аллее славы в Голливуде.
# Напишите программу, которая выводит на экран звезду, похожую на приведенную на
# рис. 13.51, с вашим именем в середине.
import my_star
def prog_10():
    pic=my_star.DrawMyStar()
prog_10()

